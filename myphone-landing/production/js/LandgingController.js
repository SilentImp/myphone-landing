var LandgingController,
  __bind = function(fn, me) {
    return function() {
      return fn.apply(me, arguments);
    };
  };

LandgingController = (function() {
  function LandgingController() {
    this.trysubmit = __bind(this.trysubmit, this);
    this.formSend = __bind(this.formSend, this);
    this.submit = __bind(this.submit, this);
    this.selectLanguage = __bind(this.selectLanguage, this);
    this.timerUpdate = __bind(this.timerUpdate, this);
    this.closeRules = __bind(this.closeRules, this);
    this.showRules = __bind(this.showRules, this);
    this.ip2Country = __bind(this.ip2Country, this);
    this.itype = 'click';
    this.html = $('html');
    if (this.html.hasClass('touch')) {
      this.itype = 'touchstart';
    }
    this.form = $('.register-form');
    this.timer = $('.time');
    this.ti = 0;
    window.setInterval(this.timerUpdate, 1000);
    this.timerUpdate();
    this.form.find('input.tel').mask("(999) 999-99-99");
    this.form.find('input.code').mask("+9?999");
    $('.rules .close').on(this.itype, this.closeRules);
    $('.show-rules').on(this.itype, this.showRules);
    this.message = this.form.prev();
    this.lang = $('nav.language');
    this.lang.on(this.itype, this.selectLanguage);
    this.lang.find('a').on(this.itype, this.selectLanguage);
    this.form.find('button').on(this.itype, this.trysubmit);
    this.form.on('submit', this.submit);
    this.language = localStorage.language || null;
    if (this.language === null) {
      $.getJSON("http://www.telize.com/geoip", this.ip2Country);
    } else if (this.language === 'AZ') {
      this.lang.find('a').trigger('click');
    }
  }

  LandgingController.prototype.ip2Country = function(obj) {
    switch (obj.country_code) {
      case 'AZ':
        this.language = 'AZ';
        this.lang.find('a').trigger('click');
        break;
      default:
        this.language = 'RU';
    }
    return localStorage.language = this.language;
  };

  LandgingController.prototype.showRules = function(event) {
    event.preventDefault();
    event.stopPropagation();
    if (event.gesture) {
      event.gesture.stopPropagation();
      event.gesture.preventDefault();
    }
    this.html.addClass('rules');
    $(event.currentTarget).closest('.page').find('.rules').show();
    window.scrollTo(0, 0);
    return false;
  };

  LandgingController.prototype.closeRules = function(event) {
    event.preventDefault();
    event.stopPropagation();
    if (event.gesture) {
      event.gesture.stopPropagation();
      event.gesture.preventDefault();
    }
    this.html.removeClass('rules');
    $(event.currentTarget.parentNode).hide();
    window.scrollTo(0, 0);
    return false;
  };

  LandgingController.prototype.timerUpdate = function() {
    var sepator;
    if ((this.ti % 2) === 0) {
      sepator = ":";
    } else {
      sepator = "Â ";
    }
    this.ti++;
    return this.timer.text(moment().format("HH" + sepator + "mm"));
  };

  LandgingController.prototype.selectLanguage = function(event) {
    event.preventDefault();
    event.stopPropagation();
    if (event.gesture) {
      event.gesture.stopPropagation();
      event.gesture.preventDefault();
    }
    this.lang.find('a').toggleClass('selected');
    this.language = this.lang.find('.selected').attr('data-lang');
    localStorage.language = this.language;
    this.html.attr('lang', this.language);
    return false;
  };

  LandgingController.prototype.submit = function(event) {
    var form;
    event.preventDefault();
    event.stopPropagation();
    if (event.gesture) {
      event.gesture.stopPropagation();
      event.gesture.preventDefault();
    }
    form = $(event.currentTarget);
    if (form.find('input:invalid').length === 0) {
      $.post(form.attr('action'), form.serialize()).complete(this.formSend);
    }
    return false;
  };

  LandgingController.prototype.formSend = function(responce) {
    this.form.hide();
    return this.message.show();
  };

  LandgingController.prototype.trysubmit = function(event) {
    var button, form;
    button = $(event.currentTarget);
    form = button.closest('form.register-form');
    return form.addClass('validation-start');
  };

  return LandgingController;

})();

$(document).ready(function() {
  return new LandgingController();
});

//# sourceMappingURL=data:application/json;base64,