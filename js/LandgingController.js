var LandgingController,
  __bind = function(fn, me) {
    return function() {
      return fn.apply(me, arguments);
    };
  };

LandgingController = (function() {
  function LandgingController() {
    this.trysubmit = __bind(this.trysubmit, this);
    this.formSend = __bind(this.formSend, this);
    this.submit = __bind(this.submit, this);
    this.selectLanguage = __bind(this.selectLanguage, this);
    this.timerUpdate = __bind(this.timerUpdate, this);
    this.codeChange = __bind(this.codeChange, this);
    this.codeSelectChange = __bind(this.codeSelectChange, this);
    this.closeRules = __bind(this.closeRules, this);
    this.showRules = __bind(this.showRules, this);
    this.ip2Country = __bind(this.ip2Country, this);
    this.itype = 'click';
    this.html = $('html');
    if (this.html.hasClass('touch')) {
      this.itype = 'touchstart';
    }
    this.form = $('.register-form');
    this.timer = $('.time');
    this.ti = 0;
    window.setInterval(this.timerUpdate, 1000);
    this.timerUpdate();
    this.form.find('.code-widget input').on('change', this.codeChange);
    this.form.find('select').on('change', this.codeSelectChange);
    this.form.find('input.tel').mask("(999) 999-99-99");
    this.form.find('input.code').mask("+9?999");
    $('.rules .close').on(this.itype, this.closeRules);
    $('.show-rules').on(this.itype, this.showRules);
    this.message = this.form.prev();
    this.lang = $('nav.language');
    this.lang.on(this.itype, this.selectLanguage);
    this.lang.find('a').on(this.itype, this.selectLanguage);
    this.form.find('button').on(this.itype, this.trysubmit);
    this.form.on('submit', this.submit);
    $.ajax('http://www.telize.com/geoip?callback=document.landing.ip2Country');
  }

  LandgingController.prototype.ip2Country = function(obj) {
    console.log(obj);
    switch (obj.country_code) {
      case 'AZ':
        return console.log('AZ');
      default:
        return console.log('RU');
    }
  };

  LandgingController.prototype.showRules = function(event) {
    event.preventDefault();
    this.html.addClass('rules');
    $(event.currentTarget).closest('.page').find('.rules').show();
    return window.scrollTo(0, 0);
  };

  LandgingController.prototype.closeRules = function(event) {
    this.html.removeClass('rules');
    $(event.currentTarget.parentNode).hide();
    return window.scrollTo(0, 0);
  };

  LandgingController.prototype.codeSelectChange = function(event) {
    var current, element, value, wrapper;
    element = $(event.currentTarget);
    value = element.val();
    wrapper = element.closest('.code-widget');
    current = wrapper.find('.current .value');
    current.text(value);
    return wrapper.find('input[type="radio"][name="code"][value="' + value + '"]').trigger('click');
  };

  LandgingController.prototype.codeChange = function(event) {
    var current, element, wrapper;
    element = $(event.currentTarget);
    wrapper = element.closest('.code-widget');
    current = wrapper.find('.current .value');
    current.text(element.val());
    wrapper.addClass('changed');
    return window.setTimeout(function() {
      return wrapper.removeClass('changed');
    }, 500);
  };

  LandgingController.prototype.timerUpdate = function() {
    var sepator;
    if ((this.ti % 2) === 0) {
      sepator = ":";
    } else {
      sepator = "Â ";
    }
    this.ti++;
    return this.timer.text(moment().format("HH" + sepator + "mm"));
  };

  LandgingController.prototype.selectLanguage = function(event) {
    event.preventDefault();
    event.stopPropagation();
    this.lang.find('a').toggleClass('selected');
    return this.html.attr('lang', this.lang.find('.selected').attr('data-lang'));
  };

  LandgingController.prototype.submit = function(event) {
    var form;
    event.preventDefault();
    form = $(event.currentTarget);
    console.log(form.serialize());
    return $.post(form.attr('action'), form.serialize()).complete(this.formSend);
  };

  LandgingController.prototype.formSend = function(responce) {
    this.form.hide();
    return this.message.show();
  };

  LandgingController.prototype.trysubmit = function(event) {
    var button, form;
    button = $(event.currentTarget);
    form = button.closest('form.register-form');
    return form.addClass('validation-start');
  };

  return LandgingController;

})();

$(document).ready(function() {
  return new LandgingController();
});

//# sourceMappingURL=data:application/json;base64,